execfile('conf.py')


from six import string_types

from doc_builder.state import BuildState
from recommonmark.parser import CommonMarkParser
import sphinx_rtd_theme 
import os

# JSON of the state object
import json
state_dict = json.load(open('readthedocs-conf.json'))


state = BuildState(**state_dict)

# Markdown Support
if 'source_suffix' in globals():
    if isinstance(source_suffix, string_types):
        source_suffix = [source_suffix, '.md']
    else:
        source_suffix.append('.md')
else:
    source_suffix = ['.rst', '.md']

if 'source_parsers' in globals():
    source_parsers['.md'] = CommonMarkParser
else:
    source_parsers = {
        '.md': CommonMarkParser,
    }

# Add RTD Static Path. Add to the end because it overwrites previous files.
if 'html_static_path' in globals():
    html_static_path.append(state.STATIC_PATH)
else:
    html_static_path = ['_static', state.STATIC_PATH]

T_PATH = os.path.join(state.TEMPLATE_PATH, 'sphinx')

#Add RTD Template Path.
if 'templates_path' in globals():
    templates_path.insert(0, T_PATH)
else:
    templates_path = [T_PATH, 'templates', '_templates',
                      '.templates']

# Add RTD Theme Path. 
if 'html_theme_path' in globals():
    html_theme_path.append(T_PATH)
else:
    html_theme_path = ['_themes', T_PATH]

# Add custom RTD extension
if 'extensions' in globals():
    extensions.append("readthedocs_ext.readthedocs")
    #extensions.append("sphinxcontrib.examplecode")
    #extensions.append("autoapi.extension")
else:
    #extensions = ["readthedocs_ext.readthedocs", "sphinxcontrib.examplecode", "autoapi.extension"]
    extensions = ["readthedocs_ext.readthedocs"]

# Add RTD Theme only if they aren't overriding it already
using_rtd_theme = False
if 'html_theme' in globals():
    if html_theme in ['default']:
        # Allow people to bail with a hack of having an html_style
        if not 'html_style' in globals():
            html_theme = 'sphinx_rtd_theme'
            using_rtd_theme = True
            html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]
else:
    html_theme = 'sphinx_rtd_theme'
    using_rtd_theme = True
    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

if globals().get('websupport2_base_url', False):
    websupport2_base_url = '{api_host}/websupport'.foramt(api_host=state.API_HOST)
    if 'http' not in state.MEDIA_URL:
        websupport2_static_url = state.STATIC_URL
    else:
        websupport2_static_url = '{media_url}/static'.format(media_url=state.MEDIA_URL)

#Add project information to the template context.
context = {
    'READTHEDOCS': True,

    'using_theme': using_rtd_theme,
    'html_theme': html_theme,
    'using_theme': (html_theme == "default"),
    'new_theme': (html_theme == "sphinx_rtd_theme"),
    'source_suffix': globals().get('source_suffix', '.rst'),

    'current_version': state.version,
    'MEDIA_URL': state.MEDIA_URL,
    'PRODUCTION_DOMAIN': state.PRODUCTION_DOMAIN,
    'versions': [],
    'downloads': [],
    'slug': state.project,
    'name': state.project,
    'rtd_language': state.language,
    'canonical_url': state.clean_canonical_url,
    'analytics_code': state.analytics_code,
    'single_version': state.single_version,
    'conf_py_path': state.conf_file,
    'api_host': state.API_HOST,
    'user_analytics_code': state.analytics_code or '',
    'global_analytics_code': state.analytics_code,
    'commit': state.commit,
}


for version in state.versions:
    context['versions'].append(
        (state.version, "/{language}/{slug}/".format(language=state.language, slug=state.version))
    )

for key, val in state.downloads.items():
    context['downloads'].append(
        (key, val)
    )

if state.display_github:
    context['github_user'] = state.username
    context['github_repo'] = state.repo
    context['github_version'] = state.branch
    context['display_github'] = state.display_github

if state.display_bitbucket:
    context['bitbucket_user'] = state.username
    context['bitbucket_repo'] = state.repo
    context['bitbucket_version'] = state.branch
    context['display_bitbucket'] = state.display_bitbucket

if 'html_context' in globals():
    html_context.update(context)
else:
    html_context = context

